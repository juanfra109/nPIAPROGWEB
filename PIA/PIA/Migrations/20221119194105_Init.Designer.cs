// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PIA.Models.dbModels;

#nullable disable

namespace PIA.Migrations
{
    [DbContext(typeof(LibreriaProyectoContext))]
    [Migration("20221119194105_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("calle");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ciudad");

                    b.Property<string>("Codpos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("codpos");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("estado");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NumeroExt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("numeroExt");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pais");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PIA.Models.dbModels.Autore", b =>
                {
                    b.Property<int>("IdAutor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idAutor");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAutor"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdAutor");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Carrito", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("idUsuario");

                    b.Property<int>("IdLibro")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<decimal>("Total")
                        .HasColumnType("money")
                        .HasColumnName("total");

                    b.HasKey("IdUsuario", "IdLibro");

                    b.HasIndex("IdLibro");

                    b.ToTable("carrito");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCategoria");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"), 1L, 1);

                    b.Property<string>("Descripción")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCategoria");

                    b.ToTable("categorias");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Cmetodopag", b =>
                {
                    b.Property<int>("Idmetpag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idmetpag");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idmetpag"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.HasKey("Idmetpag");

                    b.ToTable("cmetodopag");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Editoriale", b =>
                {
                    b.Property<int>("Ideditorial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ideditorial");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ideditorial"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Ideditorial");

                    b.ToTable("editoriales");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Libro", b =>
                {
                    b.Property<int>("IdLibro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idLibro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLibro"), 1L, 1);

                    b.Property<int>("Autor")
                        .HasColumnType("int");

                    b.Property<int>("Añopublicacion")
                        .HasColumnType("int");

                    b.Property<int>("Categoria")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Editorial")
                        .HasColumnType("int")
                        .HasColumnName("editorial");

                    b.Property<string>("Imagen")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("imagen");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("money")
                        .HasColumnName("precio");

                    b.HasKey("IdLibro");

                    b.HasIndex("Autor");

                    b.HasIndex("Categoria");

                    b.HasIndex("Editorial");

                    b.ToTable("libro");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Orden", b =>
                {
                    b.Property<int>("Idorden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idorden");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idorden"), 1L, 1);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<int>("Idmetodopag")
                        .HasColumnType("int")
                        .HasColumnName("idmetodopag");

                    b.Property<int>("Idusuario")
                        .HasColumnType("int")
                        .HasColumnName("idusuario");

                    b.Property<decimal>("Total")
                        .HasColumnType("money")
                        .HasColumnName("total");

                    b.HasKey("Idorden");

                    b.HasIndex("Idmetodopag");

                    b.HasIndex("Idusuario");

                    b.ToTable("orden");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Ordendetalle", b =>
                {
                    b.Property<int>("Idorden")
                        .HasColumnType("int")
                        .HasColumnName("idorden");

                    b.Property<int>("Idlibros")
                        .HasColumnType("int")
                        .HasColumnName("idlibros");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<decimal>("Precio")
                        .HasColumnType("money")
                        .HasColumnName("precio");

                    b.HasKey("Idorden", "Idlibros")
                        .HasName("PK_ordendetalle_1");

                    b.HasIndex("Idlibros");

                    b.ToTable("ordendetalle");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Solicitude", b =>
                {
                    b.Property<int>("IdSolicitud")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idSolicitud");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSolicitud"), 1L, 1);

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdSolicitud");

                    b.ToTable("solicitudes");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Sugerencia", b =>
                {
                    b.Property<int>("Idsugerencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idsugerencia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idsugerencia"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.HasKey("Idsugerencia");

                    b.ToTable("sugerencias");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIA.Models.dbModels.Carrito", b =>
                {
                    b.HasOne("PIA.Models.dbModels.Libro", "IdLibroNavigation")
                        .WithMany("Carritos")
                        .HasForeignKey("IdLibro")
                        .IsRequired()
                        .HasConstraintName("FK_carrito_libro");

                    b.HasOne("ApplicationUser", "IdUsuarioNavigation")
                        .WithMany("Carritos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_carrito_usuarios");

                    b.Navigation("IdLibroNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Libro", b =>
                {
                    b.HasOne("PIA.Models.dbModels.Autore", "AutorNavigation")
                        .WithMany("Libros")
                        .HasForeignKey("Autor")
                        .IsRequired()
                        .HasConstraintName("FK_libro_Autores");

                    b.HasOne("PIA.Models.dbModels.Categoria", "CategoriaNavigation")
                        .WithMany("Libros")
                        .HasForeignKey("Categoria")
                        .IsRequired()
                        .HasConstraintName("FK_libro_categorias");

                    b.HasOne("PIA.Models.dbModels.Editoriale", "EditorialNavigation")
                        .WithMany("Libros")
                        .HasForeignKey("Editorial")
                        .IsRequired()
                        .HasConstraintName("FK_libro_editoriales");

                    b.Navigation("AutorNavigation");

                    b.Navigation("CategoriaNavigation");

                    b.Navigation("EditorialNavigation");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Orden", b =>
                {
                    b.HasOne("PIA.Models.dbModels.Cmetodopag", "IdmetodopagNavigation")
                        .WithMany("Ordens")
                        .HasForeignKey("Idmetodopag")
                        .IsRequired()
                        .HasConstraintName("FK_orden_cmetodopag");

                    b.HasOne("ApplicationUser", "IdusuarioNavigation")
                        .WithMany("Ordens")
                        .HasForeignKey("Idusuario")
                        .IsRequired()
                        .HasConstraintName("FK_orden_usuarios");

                    b.Navigation("IdmetodopagNavigation");

                    b.Navigation("IdusuarioNavigation");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Ordendetalle", b =>
                {
                    b.HasOne("PIA.Models.dbModels.Libro", "IdlibrosNavigation")
                        .WithMany("Ordendetalles")
                        .HasForeignKey("Idlibros")
                        .IsRequired()
                        .HasConstraintName("FK_ordendetalle_libro");

                    b.HasOne("PIA.Models.dbModels.Orden", "IdordenNavigation")
                        .WithMany("Ordendetalles")
                        .HasForeignKey("Idorden")
                        .IsRequired()
                        .HasConstraintName("FK_ordendetalle_orden");

                    b.Navigation("IdlibrosNavigation");

                    b.Navigation("IdordenNavigation");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("Ordens");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Autore", b =>
                {
                    b.Navigation("Libros");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Categoria", b =>
                {
                    b.Navigation("Libros");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Cmetodopag", b =>
                {
                    b.Navigation("Ordens");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Editoriale", b =>
                {
                    b.Navigation("Libros");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Libro", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("Ordendetalles");
                });

            modelBuilder.Entity("PIA.Models.dbModels.Orden", b =>
                {
                    b.Navigation("Ordendetalles");
                });
#pragma warning restore 612, 618
        }
    }
}
